wages$wgClass <- cut(wages$Avgwg, quantile(wages$Avgwg,
probs = seq(0,1,0.2)),
labels = F, include.lowest = T)
head(wages)
pal <- palette(rainbow(5))
map <- MapBackground(lat = 40.155, lon = -74.715)
map <- MapBackground(lat = 40.155, lon = -74.715, api_key = "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
map <- MapBackground(lat = 40.155, lon = -74.715, api_console_key = "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
# vamos a medir los cuantiles de como esta repartida la población
register_google(key = " AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU")
map <- MapBackground(lat = 40.155, lon = -74.715, api_console_key = "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
map <- MapBackground(lat = 40.155, lon = -74.715, api_key = "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
map <- GetMap(center = c(lat,lon), zoom = 17,
API_console_key =  "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
lat<- 40.155
lon <- -74.715
map <- GetMap(center = c(lat,lon), zoom = 17,
API_console_key =  "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
PlotOnStaticMap(map, lat, lon)
map <- GetMap(center = c(lat,lon), zoom = 8,
API_console_key =  "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
PlotOnStaticMap(map, lat, lon)
PlotOnStaticMap(map, wages$Lat, wages$Long, lon,
pch=21, cex = sqrt(wages$wgClass),
bg=pal[wages$wgClass])
legend("topleft",
legend = paste("<=", round(tapply(wages$Avgwg, wages$wgClass,max
)
),0
),
pch = 21, pt.bg = pal, pt.cex = 1.0, bg="gray", title = "Ingresos promedio"
)
legend("topleft",
legend = paste("<=", round(tapply(wages$Avgwg, wages$wgClass,max
),0
),
),
pch = 21, pt.bg = pal, pt.cex = 1.0, bg="gray", title = "Ingresos promedio"
)
legend("topleft",
legend = paste("<=", round(tapply(wages$Avgwg, wages$wgClass,max
),0
)
),
pch = 21, pt.bg = pal, pt.cex = 1.0, bg="gray", title = "Ingresos promedio"
)
install.packages(c("ggmaps","maps"))
library(ggmap)
library(maps)
crimes <- read.csv("../data/tema12/chicago-crime.csv")
head(crimes)
crimes$Date <- strptime(crimes$Date, format = "%m/%d/%y %H:%M")
head(crimes)
register_google(key = " AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU")
#creamos el mapa
chicago <- get_map(location = "chicago", zoom = 11, API_console_key =  "AIzaSyBmXB5S5_NIqo6lAGH-_U-TbhrQjhOsplU" )
ggmap(chicago)
ggmap(chicago) + #vamos a representar los primeros 100 crimenes del dataframe
geom_point(data = crimes[1:100,], aes(x=Longitud, y = Latitude))
ggmap(chicago) + #vamos a representar los primeros 100 crimenes del dataframe
geom_point(data = crimes[1:100,], aes(x=Longitude, y = Latitude))
View(crimes)
counts <- as.data.frame(table(round(crimes$Longitude,2),
round(crimes$Latitude,2)
)
)
head(counts)
counts$Lat <- as.numeric(as.character(counts$Var2))
counts$Lon <- as.numeric(as.character(counts$Var1))
head(counts)
counts$Var1 <- NULL
counts$Var2 <- NULL
head(counts)
ggmap(chicago)+
ggmap(chicago)+
geom_tile(data = counts, aes(x=Lon, y=Lat, alpha = Freq),
fill = "red")
ggmap(chicago)+
geom_tile(data = counts, aes(x=Lon, y=Lat, alpha = Freq),
fill = "red")
install.packages("sp")
install.packages("rgdal")
library(sp)
library(rgdal)
countries.sp <- readOGR("../data/tema12/natural_earth/",
"ne_50m_admin=0_countries")
countries.sp <- readOGR("../data/tema12/natural_earth/",
"ne_50m_admin_0_countries")
library(sp)
library(rgdal)
countries.sp <- readOGR("../data/tema12/natural_earth/",
"ne_50m_admin_0_countries")
countries.sp <- readOGR("../data/tema12/natural_earth",
"ne_50m_admin_0_countries")
airports.sp <- readOGR("../data/tema12/natural_earth",
"ne_50m_airports")
class(countries.sp)
class(airports.sp)
plot(countries.sp)
plot(countries.sp,
col = countries.sp@data$adin)
plot(countries.sp,
col = countries.sp@data$admin)
# ahora graficamos los aeropuertos con add=T para que los pinte encima del anterior mapa
plot(airports.sp, add=T)
#grafico de l economia de cada pais
spplot(countries.sp, c("economy"))
#grafico de la poblacion estimada de cada pais
spplot(countries.sp, c("pop_est"))
library(maps)
map("world")
map("world", interior =F)
map("world", fill=T, col = palette(rainbow(8)))
#mapa de colombia
map("world","colombia")
map("colombia")
map("italy")
map("world","colombia")
map("state")
map("world","colombia")
map("italy")
map("world","colombia")
#conversion entre data frame y datos espaciales
library(sp)
nj <- read.csv("../data/tema12/nj-wages.csv")
class(nj)
head(nj)
#para convertirlo a un data frame espacial solo hacemos
coordinates(nj) <- c("Long", "Lat")
class(nj)
plot(nj)
nj.lines <- SpatialLines(list(Lines(list(Line(coordinates(nj))),"Linenj")))
plot(nj.lines)
spatial_lines <- function(spdf, name = "dummy"){
temp <- SpatialLines(list(
Lines(
list(Line(coordinates(nj))),"Linenj")
)
)
return(temp)
}
sp<- spatial_lines(nj.lines)
plot(sp)
sp<- spatial_lines(nj)
nj <- read.csv("../data/tema12/nj-wages.csv")
#para convertirlo a un data frame espacial solo hacemos
coordinates(nj) <- c("Long", "Lat")
spatial_lines <- function(spdf, name = "dummy"){
temp <- SpatialLines(list(
Lines(
list(Line(coordinates(nj))),"Linenj")
)
)
return(temp)
}
sp<- spatial_lines(nj)
plot(sp)
# Conversiones entre DF, Mapas y objetos
library(sp)
library(sp)
install.packages("maptools")
library(maptools)
nj <- read.csv("../data/tema12/nj-county-data.csv")
head(nj)
nj.data <- read.csv("../data/tema12/nj-county-data.csv")
head(nj.data) # este es un DF normal donde se tiene estados pero no se tiene
nj.map <- map("country", "new jersey", fill = T, plot = F)
nj.map <- map("county", "new jersey", fill = T, plot = F)
str(nj.map)
#nj,map tiene el nombre del estado con sus condados separados por comas
# los separamos y pedimos solo el segundo campo que es el condado
sapply(strsplit(nj.map$names, ","), function(x) x[2])
#nj,map tiene el nombre del estado con sus condados separados por comas
# los separamos y pedimos solo el segundo campo que es el condado
nj.county<- sapply(strsplit(nj.map$names, ","), function(x) x[2])
#nj,map tiene el nombre del estado con sus condados separados por comas
# los separamos y pedimos solo el segundo campo que es el condado
nj.county<- sapply(strsplit(nj.map$names, ","), function(x) x[2])
nj,sp <- map2SpatialPolygons(nj.map, IDs = nj.county,
proj4string = CRS("+porj=longlat + ellps=WGS84"))
nj.sp <- map2SpatialPolygons(nj.map, IDs = nj.county,
proj4string = CRS("+porj=longlat + ellps=WGS84"))
nj.sp <- map2SpatialPolygons(nj.map, IDs = nj.county,
proj4string = CRS("+porj=longlat +ellps=WGS84"))
nj.sp <- map2SpatialPolygons(nj.map, IDs = nj.county,
proj4string = CRS("+proj=longlat +ellps=WGS84"))
class(nj.sp)
rownames(nj.data) <- nj.data$name
nj.data$name <- NULL
head(nj.data) # este es un DF normal donde se tiene estados pero no se tiene
nj.spdf <- SpatialGridDataFrame(nj.sp, nj.data)
nj.map <- map("county", "new jersey", fill = T, plot = F)
str(nj.map) # con esto tengo cordenadas de lat y long para nj
#nj,map tiene el nombre del estado con sus condados separados por comas
# los separamos y pedimos solo el segundo campo que es el condado
nj.county<- sapply(strsplit(nj.map$names, ","), function(x) x[2])
nj.sp <- map2SpatialPolygons(nj.map, IDs = nj.county,
proj4string = CRS("+proj=longlat +ellps=WGS84"))
class(nj.sp)
nj.spdf <- SpatialGridDataFrame(nj.sp, nj.data)
nj.spdf <- SpatialPolDataFrame(nj.sp, nj.data)
nj.spdf <- SpatialPolyDataFrame(nj.sp, nj.data)
nj.spdf <- SpatialPolygonsDataFrame(nj.sp, nj.data)
class(nj.spdf)
plot(nj.spdf)
plot(nj.spdf, "per_capita_income", main= "renta per capita")
spplot(nj.spdf, "per_capita_income", main= "renta per capita")
spplot(nj.spdf, "population", main= "poblacion")
spplot(nj.spdf, "median_family_income", main= "ingresos promedio de familia")
spplot(nj.spdf, c("per_capita_income","median_family_income") , main= "ingresos")
#Añadir informacion a un objeto sp
library(maps)
library(maptools)
nj.map <- map("county", "new jersey", fill=T, plot = F)
nj.county <- sapply(strsplit(nj.map$names,","), function(x) x[2])
nj.sp <- map2SpatialPolygons(nj.map, IDs= nj.county,
proj4string = CRS("+proj=longlat +ellps=WGS84"))
nj.df <- read.csv("../data/tema12/nj-county-data.csv")
rownames(nj.df) <- nj.df$name
nj.df$name <- NULL
nj.spdf <- SpatialPolygonsDataFrame(nj.sp,nj.df)
pop.density <- nj.spdf@data$population/nj.spdf@data$area_sq_mi
pop.density
nj.spdf <- spCbind(nj.spdf, pop.density)
names(nj.spdf@data)
spplot(nj.spdf,"pop.density")
#JAVA
install.packages("rJava")
library(rJava)
,jinit()
.jinit()
.jcall("java/lang/System","S","getProperty","java.runtime.version")
getwd()
setwd("tema13")
setwd("java-files")
setwd("tema13")
setwd("tema13")
setwd("java-files")
getwd()
.jaddClassPath(getwd())
.jclassPath()
s <- .jnew("java/lang/String", "Hola Soy Christian Arcos y Soy MCs")
print(s)
.jstrVal(s)
.jcall(s, "S", "tolowerCase")
.jcall(s, "S", "toLowerCase")
.jcall(s,"$","toUpperCase")
.jcall(s,"S","toUpperCase")
.jcall(s,"S", "replaceAll", "christian Arcos", "ingeniero")
.jcall(s,"S", "replaceAll", "Christian Arcos", "ingeniero")
v <- .jnew("java/util/vector")
v <- .jnew("java/util/Vector")
months <- month.abb
months
sapply(months, v$add)
v$size()
v$toString()
monthArray <- .jarray(month.abb)
yearArray <- .jarray(as.numeric(2011:2017))
colArray <- .jarray(list(monthArray, yearArray))
print(colArray)
.jevalArray(colArray)
.jevalArray(month.name)
.jevalArray(monthArray)
print(l <- .jevalArray(colArray))
l
lapply(l, .jevalArray)
### Class hello world
hw <- .jnew("helloWorld")
### Class hello world
hw <- .jnew("hello World")
### Class hello world
hw <- .jnew("HelloWorld")
hello <- jcall(hw , "S", getString)
hello <- .jcall(hw , "S", getString)
hello <- .jcall(hw , "S", "getString")
hello
greet <- .jnew("Greeting")
print(greet)
jb <- .jcall(greet, "S", "getString". "Christian Arcos")
jb <- .jcall(greet, "S", "getString", "Christian Arcos")
print(jb)
.jstrVal(jb)
# xlsx, RExcel, XLConnect
install.packages("xlsx")
library(xlsx)
auto <- read.csv("../../../data/tema11/auto-mpg.csv", stringsAsFactors = F)
write.xlsx(auto, file = "../../../data/tema13/auto.xlsx")
write.xlsx(auto, file = "../../../data/tema13/auto.xlsx",
sheetName = "Raw Data Autos", row.names = F)
auto$mpg <- auto$mpg * 1.609
auto$z.mpg <- (auto$mpg - mean(auto$mpg))/sd(auto$mpg)
auto.wb <- createWorkbook()
shhet1 <- createSheet(auto.wb, "auto1")
rows <- createRow(sheet1, rowIndex = 1)
sheet1 <- createSheet(auto.wb, "auto1")
auto.wb <- createWorkbook()
sheet1 <- createSheet(auto.wb, "auto1")
rows <- createRow(sheet1, rowIndex = 1)
cell.1 <- createCell(rows, colIndex = 1)[[1,1]]
setCellValue(cell.1,"hola data frame de coches")
addDataFrame(auto, sheet1, startRow = 3, row.names = F)
cs <- CellStyle(auto.wb)+
Font(auto.wb, isBold = T, color = "red")
setCellStyle(cell.1,cs)
saveWorkbook(auto.wb, "../../../data/tema13/auto-wb.xlsx")
wb <- loadWorkbook("../../../data/tema13/auto-wb.xlsx")
sheets <- getSheets(wb)
sheet <- sheets[[1]]
addDataFrame(auto[,10:11], sheet, startColumn = 10, startRow = 3, row.names = F,
saveWorkbook(wb, "../../../data/tema13/auto-new.xlsx"))
addDataFrame(auto[,1:3], sheet, startColumn = 10, startRow = 3, row.names = F,
saveWorkbook(wb, "../../../data/tema13/auto-new.xlsx"))
addDataFrame(auto[,9:10], sheet, startColumn = 10, startRow = 3, row.names = F,
saveWorkbook(wb, "../../../data/tema13/auto-new.xlsx"))
addDataFrame(auto[,10:11], sheet, startColumn = 10, startRow = 3, row.names = F,
saveWorkbook(wb, "../../../data/tema13/auto-new.xlsx"))
new.auto <-read.xlsx("../../../data/tema13/auto-new.xlsx", sheetIndex = 1)
head(new.auto)
new.auto <-read.xlsx("../../../data/tema13/auto-new.xlsx", sheetIndex = "auto1",
rowIndex = 3:6, colIndex = 1:7)
head(new.auto)
#MySQL y bases de datos relacionales
install.packages("ROBDC")
#MySQL y bases de datos relacionales
install.packages("RODDC")
#MySQL y bases de datos relacionales
install.packages("RODBC")
install.packages("RJDBC")
install.packages("ROracle")
install.packages("RMySQL")
library(RODBC)
odbcDataSources()
con <- odbcConnect("MySQL")
odbcDataSources()
con <- odbcConnect("MySQL",
uid = "christian",
pwd = "Pecosoypecosa14")
custData <- sqlQuery(con, "select * from Rating limit 5")
custData
custData <- sqlQuery(con, "select * from recomendationsystem.Rating limit 5;")
custData
#hacer una consulta a MySQL de toda la tabla peor una sola variable
custData <- sqlQuery(con, "select raiting from recomendationsystem.Rating limit 5;")
custData
#hacer una consulta a MySQL de toda la tabla peor una sola variable
custData <- sqlQuery(con, "select rating from recomendationsystem.Rating limit 5;")
custData
customers <- c("christian Arcos", "pol luna", "andres Patricio")
ordardate <- as.Date(c('2018-01-25','2017-12-31','2017-12-1'))
orderamount <- c(350, 44.65, 105.32)
#creamos el dataframes
orders <- data.frame(customers, ordardate, orderamount)
View(orders)
sqlSave(con, orders, "recomendationsystem.Orders", append = F)
#creamos el dataframes
orders <- data.frame(customers, orderamount)
sqlSave(con, orders, "recomendationsystem.Orders", append = F)
df<-sqlSave(con, orders, "recomendationsystem.Orders", append = F)
df
df<-sqlSave(con, orders, "recomendationsystem.Orders", append = T)
df
df<-sqlSave(con, orders, "recomendationsystem.Orders", append = F)
#para hacer una consulta
df <- sqlQuery(con, "select * from recomendationsystem.Orders")
df
#OTRA LIBRERIA
library(RMySQL)
#creamos la coneccion
con <- dbConnect(MySQL(),
dbname = "recomendationsystem",
host = "127.0.0.1",
port = 3306,
username = "christian",
password = "Pecosoypecosa14")
# leer una tabla
ac <- dbReadTable(con, "Acomodation")
ac
df <- dbGetQuery(con, "select * from Acomodation where like '%chalet%'")
df <- dbGetQuery(con, "select * from Acomodation where title like '%chalet%'")
df
#creamos el dataframes
orders <- data.frame(customers, ordardate,orderamount)
dbWriteTable(con, "Orders", orders)
dbWriteTable(con, "Orders", orders)
dbReadTable(con, "Orders")
dbWriteTable(con, "Orders", orders)
#creamos el dataframes
orders <- data.frame(customers, orderamount)
dbWriteTable(con, "Orders", orders)
dbReadTable(con, "Orders")
dbWriteTable(con, "Orders", orders)
dbWriteTable(con, "Orders", orders, --local-infile=1)
dbWriteTable(con, "Orders", orders, --local-infile)
dbWriteTable(con, "Orders", field.types = c(row_names="text", customers="text", orderamount="double"), append =T)
orders
dbWriteTable(con, "Orders", orders)
dbReadTable(con, "Orders")
#hacer una consulta especifica
<- dbSendQuery(con, "select location, max(price) from Acomodation group by location order by max(price) desc ")
#hacer una consulta especifica
rs<- dbSendQuery(con, "select location, max(price) from Acomodation group by location order by max(price) desc ")
rs
while(!dbHasCompleted(rs)){ # mientras no se haya terminado la consulta
printfetch(rs, n=2)
}
while(!dbHasCompleted(rs)){ # mientras no se haya terminado la consulta
print(fetch(rs, n=2))
}
dbClearResult(rs)
# y desconectar la coneccion
dbDisconnect(con)
# para mostra el numero de conecciones
dbListConnections(dbDriver("MySQL"))
#creamos la coneccion
con <- dbConnect(MySQL(),
dbname = "recomendationsystem",
host = "127.0.0.1",
port = 3306,
username = "christian",
password = "Pecosoypecosa14")
# para mostra el numero de conecciones
dbListConnections(dbDriver("MySQL"))
dbClearResult(rs)
# y desconectar la coneccion
dbDisconnect(con)
# para mostra el numero de conecciones
dbListConnections(dbDriver("MySQL"))
#creamos la coneccion
con <- dbConnect(MySQL(),
dbname = "recomendationsystem",
host = "127.0.0.1",
port = 3306,
username = "christian",
password = "Pecosoypecosa14")
dbWriteTable(con, "Orders", orders, row.names = F)
install.packages(c("rmongodb", "mongolite"))
install.packages(c("Rmongo", "mongolite"))
library(RMongo)
install.packages(c("RMongo", "mongolite"))
install.packages("rmongodb")
library(devtools) # para acceder a un repositorio github donde se encuentra la red entrenada
devtools::install_github("https://github.com/tc/RMongo")
devtools::install_local(path = "../RMongo_0.0.25/")
devtools::install_local(path = "C:\Users\christian\Documents\Cursos_Desarrollo_BD_AI\Analisis_con_R\scripts\tema13\RMongo_0.0.25\")
devtools::install_local(path = "Users\christian\Documents\Cursos_Desarrollo_BD_AI\Analisis_con_R\scripts\tema13\RMongo_0.0.25\")
devtools::install_local(path = "../RMongo_0.0.25/RMongo/R/rmongo.R")
devtools::install_local(path = "../RMongo_0.0.25.tar.gz")
library(data.table)
crimes <- data.table::fread("../../../data/tema12/chicago-crime.csv")
library(mongolite)
View(crimes)
crime_collection = mongo(collection = "crimes",
db = "chicago")
crime_collection(crimes)
crime_collection$insert(crimes)
crime_collection$count()
crime_collection$count$iterate()$one() # devuelve todos los crimenes
crime_collection$iterate()$one() # devuelve todos los crimenes
crimes <- data.table::fread("../../../data/tema13/Crimes_2001_to_present_sample.csv")
crime_collection = mongo(collection = "full_crimes",
db = "chicago")
crime_collection$insert(crimes)
crime_collection$count() # devuelve todos los crimenes
crime_collection$iterate()$one() # devuelve todos los crimenes
View(crimes)
crime_collection$count('{ "Primary Type" : "ASSAULT"')
crime_collection$count('{ "Primary Type" : "ASSAULT"}')
library(dplyr)
crimes <- crime_collection$find('{}', fields = '{"Primary Type" : 1 , "Year" :1}')
crimes
crimes %>% group_by(`Primary Type`) %>%
summarize(count=n()) %>% arrange(desc(Count)) %>% head(10)
crimes %>% group_by(`Primary Type`) %>%
summarize(Count=n()) %>% arrange(desc(Count)) %>% head(10)
crimes %>% group_by(`Year`) %>%
summarize(Count=n()) %>% arrange(desc(Count)) %>% head(10)
library(ggplot2)
crime_collection$aggregate('[{"$group:{"_id":"$Location Description", "Count" :{"$sum":1}}"}]') %>% na.omit() %>%
arrange(desc(Count)) %>% head(10)
crime_collection$aggregate('[{"$group":{"_id":"$Location Description", "Count" :{"$sum":1}}}]') %>% na.omit() %>%
arrange(desc(Count)) %>% head(10)
ggplot(aes(x=reorder(`_id`, Count), y = Count))+
geom_bar(stat = "identity", fill= "#C678EF")+
geom_text(aes(label = Count), color = "red") +
corrd_flip() + xlab("lugar del crimen") + ylab("numero de crimenes ")
crime_collection$aggregate('[{"$group":{"_id":"$Location Description", "Count" :{"$sum":1}}}]') %>% na.omit() %>%
arrange(desc(Count)) %>% head(10)
crime_collection$aggregate('[{"$group":{"_id":"$Location Description", "Count" :{"$sum":1}}}]') %>% na.omit() %>%
arrange(desc(Count)) %>% head(10)%>%
ggplot(aes(x=reorder(`_id`, Count), y = Count))+
geom_bar(stat = "identity", fill= "#C678EF")+
geom_text(aes(label = Count), color = "red") +
corrd_flip() + xlab("lugar del crimen") + ylab("numero de crimenes ")
crime_collection$aggregate('[{"$group":{"_id":"$Location Description", "Count" :{"$sum":1}}}]') %>% na.omit() %>%
arrange(desc(Count)) %>% head(10)%>%
ggplot(aes(x=reorder(`_id`, Count), y = Count))+
geom_bar(stat = "identity", fill= "#C678EF")+
geom_text(aes(label = Count), color = "red") +
coord_flip() + xlab("lugar del crimen") + ylab("numero de crimenes ")
library(devtools)
devtools::install_github("apache/spark@v2.1.1" , subdir = "R/pkg")
library(SparkR)
sparkR.session()
devtools::install_github("apache/spark@v2.2.1" , subdir = "R/pkg") # solo instalo el paquete de R
library(SparkR)
library("SparkR", lib.loc="~/R/win-library/3.5")
sparkR.session()
#Apache spark
install.packages("sparkR")
#Apache spark
install.packages("SparkR")
